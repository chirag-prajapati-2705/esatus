
$(document).ready(function() {
    var switcher = $("[data-toggle='switch']");
    switcher.wrap('<div class="switch" />').parent().bootstrapSwitch();

    var status = (switcher.data('status') == 1) ? true : false;

    var con = $('div.switch');
    con.bootstrapSwitch('setState', status);
    con.on('switch-change', function() {
        $.ajax('http://www.esatus.fr/disponibilites/modifier', {
            type: "POST",
            error: function() {
                con.trigger('switch-change');
            }
        });
    });

    // On call launch page : Show related experts after 60 seconds
    //if (jQuery('body').hasClass('page-call') == true) {

    //function more_experts() {
        //$('.call-status-box.call-status-0').hide();
        //$('.call-status-box.call-status-1').fadeIn();
        //$('.service-target').animate({'opacity': 0.5}, 1500);
    //}

            //commented by andru
        ////var timer = setTimeout(more_experts, 60000);
    //};
    //
    //
    
     // Testimonial Slider
    var owl = $("#quote-slider");
    owl.owlCarousel({
        navigation: true,
        navigationText: [
              "Précèdent",
              "Suivant"
      ],
        singleItem: true,
        autoHeight : true,
        transitionStyle: "fade",
        autoPlay: 3000
    });

    // Smoth scroll
    $('body').on('click', '.page-scroll', function(event) {
        var $anchor = $(this);
        $('html, body').stop().animate({
            scrollTop: $($anchor.attr('href')).offset().top
        }, 1500, 'easeInOutExpo');
        event.preventDefault();
    });

    // Menu Fix
    $( window ).resize(function() {
        if($( window ).width() > 767){
            $('.nav-container').affix({
              offset: {
                top: $('header').height()
              }
            });
        }
    });

    // MasterSlider
    (function($) {
        "use strict";
        var slider = new MasterSlider();
        // adds Arrows navigation control to the slider.
        slider.control('arrows');
        slider.control('bullets');
        
        slider.setup('masterslider' , {
             width:1247,    // slider standard width
             height:551,   // slider standard height
             space:0,
             speed:45,
             layout:"autofill",
             loop:true,
             preload:0,
             autoplay:true,
             view:"parallaxMask"
        });
    })(jQuery);

});

//andru move
function more_experts() {
    $('.call-status-box.call-status-0').hide();
    $('.call-status-box.call-status-1').fadeIn();
    $('.service-target').animate({'opacity': 0.5}, 1500);
}

$(function() {
    $('#demo4').scrollbox({
        direction: 'h',
        switchItems: 5,
        distance: 670
    });
});

$(window).load(function() {
    $('#slider').flexslider({
        namespace: "flex-", //{NEW} String: Prefix string attached to the class of every element generated by the plugin
        selector: ".slides > li", //{NEW} Selector: Must match a simple pattern. '{container} > {slide}' -- Ignore pattern at your own peril
        animation: "slide",
        easing: "swing", //{NEW} String: Determines the easing method used in jQuery transitions. jQuery easing plugin is supported!	
        direction: "horizontal", //String: Select the sliding direction, 'horizontal' or 'vertical'
        reverse: false, //{NEW} Boolean: Reverse the animation direction
        animationLoop: true, //Boolean: Should the animation loop? If false, directionNav will received "disable" classes at either end
        smoothHeight: true, //{NEW} Boolean: Allow height of the slider to animate smoothly in horizontal mode   
        slideshow: true, //Boolean: Animate slider automatically
        slideshowSpeed: 5000, //Integer: Set the speed of the slideshow cycling, in milliseconds
        animationSpeed: 600, //Integer: Set the speed of animations, in milliseconds  
        initDelay: 0, //{NEW} Integer: Set an initialization delay, in milliseconds
        randomize: false, //Boolean: Randomize slide order
        useCSS: true, //{NEW} Boolean: Slider will use CSS3 transitions if available
        touch: true, //{NEW} Boolean: Allow touch swipe navigation of the slider on touch-enabled devices
        video: false, //{NEW} Boolean: If using video in the slider, will prevent CSS3 3D Transforms to avoid graphical glitches
        directionNav: true, //Boolean: Create navigation for previous/next navigation? (true/false)

        controlNav: true, //Boolean: Create navigation for paging control of each clide? Note: Leave true for manualControls usage
        keyboard: true, //Boolean: Allow slider navigating via keyboard left/right keys
        mousewheel: false, //Boolean: Allow slider navigating via mousewheel
        prevText: "Previous", //String: Set the text for the "previous" directionNav item
        nextText: "Next", //String: Set the text for the "next" directionNav item
        pausePlay: false, //Boolean: Create pause/play dynamic element
        pauseText: "Pause", //String: Set the text for the "pause" pausePlay item
        playText: "Play", //String: Set the text for the "play" pausePlay item
        startAt: 0, //Integer: The slide that the slider should start on. Array notation (0 = first slide)
        pauseOnAction: true, //Boolean: Pause the slideshow when interacting with control elements, highly recommended.
        pauseOnHover: true, //Boolean: Pause the slideshow when hovering over slider, then resume when no longer hovering     
        start: function() {
        }, //Callback: function(slider) - Fires when the slider loads the first slide
        controlsContainer: "", //Selector: Declare which container the navigation elements should be appended too. Default container is the flexSlider element. Example use would be ".flexslider-container", "#container", etc. If the given element is 		                                        not found, the default action will be taken.
        manualControls: "", //Selector: Declare custom control navigation. Example would be ".flex-control-nav li" or "#tabs-nav li img", etc. The number of elements in your controlNav should match the number of slides/tabs.
        // Carousel Options
        itemWidth: 0,
        //{NEW} Integer: Box-model width of individual carousel items, including horizontal borders and padding.
        itemMargin: 10, //{NEW} Integer: Margin between carousel items.
        minItems: 0, //{NEW} Integer: Minimum number of carousel items that should be visible. Items will resize fluidly when below this.
        maxItems: 0, //{NEW} Integer: Maxmimum number of carousel items that should be visible. Items will resize fluidly when above this limit.
        move: 0, //{NEW} Integer: Number of carousel items that should move on animation. If 0, slider will move all visible items.
        before: function() {
        }, //Callback: function(slider) - Fires asynchronously with each slider animation
        after: function() {
        }, //Callback: function(slider) - Fires after each slider animation completes
        end: function() {
        }               //Callback: function(slider) - Fires when the slider reaches the last slide (asynchronous)
    });
});

$(window).load(function() {
    $('#slider2').flexslider({
        namespace: "flex-", //{NEW} String: Prefix string attached to the class of every element generated by the plugin
        selector: ".slides > li", //{NEW} Selector: Must match a simple pattern. '{container} > {slide}' -- Ignore pattern at your own peril
        animation: "slide",
        easing: "swing", //{NEW} String: Determines the easing method used in jQuery transitions. jQuery easing plugin is supported!	
        direction: "horizontal", //String: Select the sliding direction, 'horizontal' or 'vertical'
        reverse: false, //{NEW} Boolean: Reverse the animation direction
        animationLoop: true, //Boolean: Should the animation loop? If false, directionNav will received "disable" classes at either end
        smoothHeight: true, //{NEW} Boolean: Allow height of the slider to animate smoothly in horizontal mode   
        slideshow: true, //Boolean: Animate slider automatically
        slideshowSpeed: 5000, //Integer: Set the speed of the slideshow cycling, in milliseconds
        animationSpeed: 600, //Integer: Set the speed of animations, in milliseconds  
        initDelay: 0, //{NEW} Integer: Set an initialization delay, in milliseconds
        randomize: false, //Boolean: Randomize slide order
        useCSS: true, //{NEW} Boolean: Slider will use CSS3 transitions if available
        touch: true, //{NEW} Boolean: Allow touch swipe navigation of the slider on touch-enabled devices
        video: false, //{NEW} Boolean: If using video in the slider, will prevent CSS3 3D Transforms to avoid graphical glitches
        directionNav: true, //Boolean: Create navigation for previous/next navigation? (true/false)

        controlNav: true, //Boolean: Create navigation for paging control of each clide? Note: Leave true for manualControls usage
        keyboard: true, //Boolean: Allow slider navigating via keyboard left/right keys
        mousewheel: false, //Boolean: Allow slider navigating via mousewheel
        prevText: "Previous", //String: Set the text for the "previous" directionNav item
        nextText: "Next", //String: Set the text for the "next" directionNav item
        pausePlay: false, //Boolean: Create pause/play dynamic element
        pauseText: "Pause", //String: Set the text for the "pause" pausePlay item
        playText: "Play", //String: Set the text for the "play" pausePlay item
        startAt: 0, //Integer: The slide that the slider should start on. Array notation (0 = first slide)
        pauseOnAction: true, //Boolean: Pause the slideshow when interacting with control elements, highly recommended.
        pauseOnHover: true, //Boolean: Pause the slideshow when hovering over slider, then resume when no longer hovering     
        start: function() {
        }, //Callback: function(slider) - Fires when the slider loads the first slide
        controlsContainer: "", //Selector: Declare which container the navigation elements should be appended too. Default container is the flexSlider element. Example use would be ".flexslider-container", "#container", etc. If the given element is 		                                        not found, the default action will be taken.
        manualControls: "", //Selector: Declare custom control navigation. Example would be ".flex-control-nav li" or "#tabs-nav li img", etc. The number of elements in your controlNav should match the number of slides/tabs.
        // Carousel Options
        itemWidth:622,
        //{NEW} Integer: Box-model width of individual carousel items, including horizontal borders and padding.
        itemMargin: 0, //{NEW} Integer: Margin between carousel items.
        minItems: 0, //{NEW} Integer: Minimum number of carousel items that should be visible. Items will resize fluidly when below this.
        maxItems: 2, //{NEW} Integer: Maxmimum number of carousel items that should be visible. Items will resize fluidly when above this limit.
        move: 2, //{NEW} Integer: Number of carousel items that should move on animation. If 0, slider will move all visible items.
        before: function() {
        }, //Callback: function(slider) - Fires asynchronously with each slider animation
        after: function() {
        }, //Callback: function(slider) - Fires after each slider animation completes
        end: function() {
        }               //Callback: function(slider) - Fires when the slider reaches the last slide (asynchronous)
    });



});
